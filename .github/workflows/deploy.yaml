name: Deploy Infrastructure

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  discover-quadlet:
    runs-on: [self-hosted, quadlet]
    outputs:
      containers: ${{ steps.set-matrix.outputs.containers }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Find container definitions
        id: set-matrix
        run: |
          CONTAINERS=$(find ./containers -name "*.container" -exec basename {} .container \; | jq -R -s -c 'split("\n")[:-1]')
          echo "containers=$CONTAINERS" >> "$GITHUB_OUTPUT"
          echo "Found containers: $CONTAINERS"

  deploy-quadlet:
    runs-on: [self-hosted, quadlet]
    needs: discover-quadlet
    strategy:
      matrix:
        container: ${{ fromJson(needs.discover-quadlet.outputs.containers) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Ensure packages
        run: |
          sudo apt-get update 
          sudo apt-get install -y $(cat ./packages)
        
      - name: Get user ID
        id: get-uid
        run: |
          USER_ID=$(id -u ${{ secrets.SYSTEM_USER }})
          echo "uid=$USER_ID" >> $GITHUB_OUTPUT
      
      - name: Deploy ${{ matrix.container }} container
        env:
          USER_ID: ${{ steps.get-uid.outputs.uid }}
        run: |
          envsubst < "./containers/${{ matrix.container }}.container" | sudo tee "/etc/containers/systemd/${{ matrix.container }}.container"
          
      - name: Reload systemd daemon
        run: |
          sudo systemctl daemon-reload
      
      - name: Pull new images
        run: |
          sudo podman auto-update
          
      - name: Restart ${{ matrix.container }} container
        run: |
          sudo systemctl restart ${{ matrix.container }}.service
      
      - name: Check containers are active
        run: |
          sudo systemctl is-active ${{ matrix.container }}.service
      
      - name: Output list of running containers
        run: | 
          sudo podman ps
        if: success() || failure()

  deploy-k3s:
    runs-on: [self-hosted, k3s]
    env:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Install kubectl
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y apt-transport-https ca-certificates curl
      #     curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
      #     echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      #     sudo apt-get update
      #     sudo apt-get install -y kubectl

      # - name: Install Helm
      #   run: |
      #     curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # - name: Configure k3s
      #   run: |
      #     # Install k3s if not already installed
      #     if ! command -v k3s &> /dev/null; then
      #       curl -sfL https://get.k3s.io | sh -
      #     fi
          
      #     # Wait for k3s to be ready
      #     timeout 60s bash -c 'until kubectl get nodes; do sleep 2; done'
          
      #     # Get kubeconfig
      #     sudo cat /etc/rancher/k3s/k3s.yaml > $HOME/.kube/config
      #     sudo chown $(id -u):$(id -g) $HOME/.kube/config
      #     chmod 600 $HOME/.kube/config

      - name: Get user ID for Plex
        id: get-uid
        run: |
          USER_ID=$(id -u ${{ secrets.SYSTEM_USER }})
          echo "uid=$USER_ID" >> $GITHUB_OUTPUT

      - name: Install ArgoCD
        run: |
          helm dependency update ./helm/argo-cd
          helm upgrade --install argocd ./helm/argo-cd \
            --namespace argocd \
            --create-namespace \
            --wait
      
      - name: Apply initial Application CRDs
        run: |
          # Apply the Application definitions
          kubectl apply -f helm/apps/