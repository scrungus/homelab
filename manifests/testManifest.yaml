# hook-test.yaml
---
# Create a namespace for our test
apiVersion: v1
kind: Namespace
metadata:
  name: hook-test
---
# Service Account for the hooks
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-sa
  namespace: hook-test
  annotations:
    argocd.argoproj.io/hook: PreSync,PostDelete
---
# Role for secret management in hook-test namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-manager
  namespace: hook-test
  annotations:
    argocd.argoproj.io/hook: PreSync,PostDelete
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["create", "get", "delete", "list", "patch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list"]
---
# Additional Role for tracking execution in default namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hook-test-tracker
  namespace: default
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "update", "patch"]
---
# RoleBinding for the hook-test namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hook-sa-binding
  namespace: hook-test
  annotations:
    argocd.argoproj.io/hook: PreSync,PostDelete
subjects:
- kind: ServiceAccount
  name: hook-sa
  namespace: hook-test
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
---
# Additional RoleBinding for the default namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hook-test-default-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: hook-sa
  namespace: hook-test
roleRef:
  kind: Role
  name: hook-test-tracker
  apiGroup: rbac.authorization.k8s.io
---
# Simplified hook job with both PreSync and PostDelete annotations
apiVersion: batch/v1
kind: Job
metadata:
  name: dual-phase-hook
  namespace: hook-test
  annotations:
    argocd.argoproj.io/hook: PreSync,PostDelete
    #argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      serviceAccountName: hook-sa
      containers:
      - name: kubectl
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Running hook job..."
          
          # Create a simple ConfigMap to log that this job ran
          TIMESTAMP=$(date +%s)
          JOB_POD_NAME=$(hostname)
          
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: hook-execution-log-${TIMESTAMP}
            namespace: hook-test
          data:
            pod: "${JOB_POD_NAME}"
            timestamp: "${TIMESTAMP}"
            message: "Dual-phase hook executed"
          EOF
          
          # IMPROVED PHASE DETECTION:
          # Check if the app deployment exists to determine phase more reliably
          # For PreSync: Deployment shouldn't exist yet
          # For PostDelete: Deployment should be gone or in terminating state
          
          # First explicitly check for the deployment
          DEPLOYMENT_OUTPUT=$(kubectl get deployment test-app -n hook-test -o name --ignore-not-found 2>/dev/null)
          
          # Then check for the secret and capture its actual output
          SECRET_OUTPUT=$(kubectl get secret test-secret -n hook-test -o name --ignore-not-found 2>/dev/null)
          
          # Print debug information
          echo "Deployment check output: '$DEPLOYMENT_OUTPUT'"
          echo "Secret check output: '$SECRET_OUTPUT'"
          
          if [ -z "$DEPLOYMENT_OUTPUT" ] && [ -z "$SECRET_OUTPUT" ]; then
            # No deployment and no secret - this is PreSync
            echo "Both deployment and secret are missing - this is the PreSync phase"
            PHASE="PreSync"
          elif [ -n "$DEPLOYMENT_OUTPUT" ] || [ -n "$SECRET_OUTPUT" ]; then
            # Either deployment or secret exists - this is PostDelete
            echo "Either deployment or secret exists - this is the PostDelete phase"
            PHASE="PostDelete"
          else
            # This shouldn't happen, but default to PreSync
            echo "Unable to determine phase - defaulting to PreSync"
            PHASE="PreSync"
          fi
          
          echo "Detected phase: $PHASE"
          
          # Add a label to the ConfigMap to indicate phase
          kubectl label configmap hook-execution-log-${TIMESTAMP} -n hook-test phase=${PHASE}
          
          # Execute appropriate phase actions
          if [ "$PHASE" = "PreSync" ]; then
            # Create the secret for the application
            echo "Creating secret in PreSync phase"
            kubectl create secret generic test-secret \
              --namespace=hook-test \
              --from-literal=username=admin \
              --from-literal=password=t0p-s3cr3t
            echo "Secret creation completed"
          else
            # Clean up the secret
            echo "Cleaning up secret in PostDelete phase"
            if [ -n "$SECRET_OUTPUT" ]; then
              kubectl delete secret test-secret -n hook-test
              echo "Secret deletion completed"
            else
              echo "Secret not found - nothing to delete"
            fi
            
            # Create a persistent marker in default namespace
            # This will survive the hook-test namespace deletion
            echo "Creating persistent marker in default namespace..."
            kubectl create configmap postdelete-executed \
              --namespace=default \
              --from-literal=time="$(date)" \
              --from-literal=phase="PostDelete" \
              --from-literal=app="hook-test" || true
            
            # Sleep to give time for inspection
            echo "PostDelete phase sleeping for 60 seconds to allow inspection..."
            sleep 60
            echo "Sleep completed"
          fi
          
          echo "Hook job completed successfully!"
      restartPolicy: Never
  backoffLimit: 2
---
# A simple deployment that uses the secret
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-app
  namespace: hook-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-app
  template:
    metadata:
      labels:
        app: test-app
    spec:
      containers:
      - name: app
        image: nginx:latest
        env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: test-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: test-secret
              key: password