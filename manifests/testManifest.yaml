# hook-test.yaml
---
# Create a namespace for our test
apiVersion: v1
kind: Namespace
metadata:
  name: hook-test
---
# Service Account for the hooks
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-sa
  namespace: hook-test
  annotations:
    argocd.argoproj.io/hook: PreSync
---
# Role for secret management in hook-test namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-manager
  namespace: hook-test
  annotations:
    argocd.argoproj.io/hook: PreSync
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["create", "get", "delete", "list", "patch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list"]
---
# Additional Role for tracking execution in default namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hook-test-tracker
  namespace: default
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "update", "patch"]
---
# RoleBinding for the hook-test namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hook-sa-binding
  namespace: hook-test
  annotations:
    argocd.argoproj.io/hook: PreSync
subjects:
- kind: ServiceAccount
  name: hook-sa
  namespace: hook-test
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
---
# Additional RoleBinding for the default namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hook-test-default-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: hook-sa
  namespace: hook-test
roleRef:
  kind: Role
  name: hook-test-tracker
  apiGroup: rbac.authorization.k8s.io
---
# PreSync hook job
apiVersion: batch/v1
kind: Job
metadata:
  name: presync-hook
  namespace: hook-test
  annotations:
    argocd.argoproj.io/hook: PreSync
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      serviceAccountName: hook-sa
      containers:
      - name: kubectl
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Running PreSync hook job..."
          
          # Create a simple ConfigMap to log that this job ran
          TIMESTAMP=$(date +%s)
          JOB_POD_NAME=$(hostname)
          
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: hook-execution-log-${TIMESTAMP}
            namespace: hook-test
          data:
            pod: "${JOB_POD_NAME}"
            timestamp: "${TIMESTAMP}"
            message: "PreSync hook executed"
            phase: "PreSync"
          EOF
          
          # Create the secret for the application
          echo "Creating secret in PreSync phase"
          kubectl create secret generic test-secret \
            --namespace=hook-test \
            --from-literal=username=admin \
            --from-literal=password=t0p-s3cr3t
          echo "Secret creation completed"
          
          echo "PreSync hook job completed successfully!"
      restartPolicy: Never
  backoffLimit: 2
---
# PostDelete hook job - in the default namespace to avoid namespace deletion issues
apiVersion: batch/v1
kind: Job
metadata:
  name: postdelete-hook
  namespace: default  # Important: This job runs in default namespace
  annotations:
    argocd.argoproj.io/hook: PostDelete
spec:
  ttlSecondsAfterFinished: 600  # Longer TTL for inspection
  template:
    spec:
      serviceAccountName: default  # Using default SA in default namespace
      containers:
      - name: kubectl
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Running PostDelete hook job..."
          
          # Create a persistent marker in default namespace
          echo "Creating persistent marker in default namespace..."
          kubectl create configmap postdelete-executed \
            --namespace=default \
            --from-literal=time="$(date)" \
            --from-literal=phase="PostDelete" \
            --from-literal=app="hook-test" 
          
          # Optional: If we still need to clean up anything from the other namespace, try that
          # This might fail if the namespace is already gone, which is fine
          kubectl delete secret test-secret -n hook-test 2>/dev/null || true
          
          # Sleep to give time for inspection
          echo "PostDelete phase sleeping for 60 seconds to allow inspection..."
          sleep 60
          echo "Sleep completed"
          
          echo "PostDelete hook job completed successfully!"
      restartPolicy: Never
  backoffLimit: 2
---
# A simple deployment that uses the secret
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-app
  namespace: hook-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-app
  template:
    metadata:
      labels:
        app: test-app
    spec:
      containers:
      - name: app
        image: nginx:latest
        env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: test-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: test-secret
              key: password